"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"23e00775abb0\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvZ2xvYmFscy5jc3M/OTU4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjIzZTAwNzc1YWJiMFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/api/client.ts":
/*!*******************************!*\
  !*** ./src/lib/api/client.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: function() { return /* binding */ apiClient; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-cookie */ \"(app-pages-browser)/./node_modules/js-cookie/dist/js.cookie.mjs\");\n\n\nconst API_BASE_URL = \"http://localhost:8080/api/v1\" || 0;\nclass ApiClient {\n    setupInterceptors() {\n        // Request interceptor\n        this.client.interceptors.request.use((config)=>{\n            const token = this.getAuthToken();\n            if (token) {\n                config.headers.Authorization = \"Bearer \".concat(token);\n            }\n            // Add CORS headers\n            config.headers[\"Access-Control-Allow-Origin\"] = \"*\";\n            config.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PUT, DELETE, OPTIONS\";\n            config.headers[\"Access-Control-Allow-Headers\"] = \"Content-Type, Authorization\";\n            return config;\n        }, (error)=>{\n            return Promise.reject(error);\n        });\n        // Response interceptor\n        this.client.interceptors.response.use((response)=>{\n            return response;\n        }, (error)=>{\n            var _error_response;\n            // Handle CORS errors\n            if (error.code === \"ERR_NETWORK\" || error.message.includes(\"CORS\")) {\n                console.error(\"CORS Error: Make sure your backend allows cross-origin requests from:\", window.location.origin);\n            }\n            if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 401) {\n                this.removeAuthToken();\n                // Only redirect if we're in the browser and not already on login page\n                if ( true && !window.location.pathname.includes(\"/auth/login\")) {\n                    window.location.href = \"/auth/login\";\n                }\n            }\n            return Promise.reject(error);\n        });\n    }\n    getAuthToken() {\n        if (true) {\n            return js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"auth_token\") || localStorage.getItem(\"auth_token\");\n        }\n        return null;\n    }\n    removeAuthToken() {\n        if (true) {\n            js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(\"auth_token\");\n            localStorage.removeItem(\"auth_token\");\n        }\n    }\n    setAuthToken(token) {\n        if (true) {\n            js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set(\"auth_token\", token, {\n                expires: 7,\n                secure: false,\n                sameSite: \"lax\"\n            });\n            localStorage.setItem(\"auth_token\", token);\n        }\n    }\n    // Generic HTTP methods with better error handling\n    async get(url, params) {\n        try {\n            const response = await this.client.get(url, {\n                params\n            });\n            return response.data;\n        } catch (error) {\n            if (error.code === \"ERR_NETWORK\") {\n                throw new Error(\"Unable to connect to the server. Please check if the backend is running.\");\n            }\n            throw error;\n        }\n    }\n    async post(url, data, config) {\n        try {\n            const response = await this.client.post(url, data, config);\n            return response.data;\n        } catch (error) {\n            if (error.code === \"ERR_NETWORK\") {\n                throw new Error(\"Unable to connect to the server. Please check if the backend is running.\");\n            }\n            throw error;\n        }\n    }\n    async put(url, data) {\n        try {\n            const response = await this.client.put(url, data);\n            return response.data;\n        } catch (error) {\n            if (error.code === \"ERR_NETWORK\") {\n                throw new Error(\"Unable to connect to the server. Please check if the backend is running.\");\n            }\n            throw error;\n        }\n    }\n    async patch(url, data) {\n        try {\n            const response = await this.client.patch(url, data);\n            return response.data;\n        } catch (error) {\n            if (error.code === \"ERR_NETWORK\") {\n                throw new Error(\"Unable to connect to the server. Please check if the backend is running.\");\n            }\n            throw error;\n        }\n    }\n    async delete(url) {\n        try {\n            const response = await this.client.delete(url);\n            return response.data;\n        } catch (error) {\n            if (error.code === \"ERR_NETWORK\") {\n                throw new Error(\"Unable to connect to the server. Please check if the backend is running.\");\n            }\n            throw error;\n        }\n    }\n    // File upload method\n    async uploadFile(url, file, onProgress) {\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        const config = {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            },\n            onUploadProgress: (progressEvent)=>{\n                if (onProgress && progressEvent.total) {\n                    const progress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n                    onProgress(progress);\n                }\n            }\n        };\n        try {\n            const response = await this.client.post(url, formData, config);\n            return response.data;\n        } catch (error) {\n            if (error.code === \"ERR_NETWORK\") {\n                throw new Error(\"Unable to connect to the server. Please check if the backend is running.\");\n            }\n            throw error;\n        }\n    }\n    // Multiple file upload method\n    async uploadFiles(url, files, onProgress) {\n        const formData = new FormData();\n        files.forEach((file, index)=>{\n            formData.append(\"files[\".concat(index, \"]\"), file);\n        });\n        const config = {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            },\n            onUploadProgress: (progressEvent)=>{\n                if (onProgress && progressEvent.total) {\n                    const progress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n                    onProgress(progress);\n                }\n            }\n        };\n        try {\n            const response = await this.client.post(url, formData, config);\n            return response.data;\n        } catch (error) {\n            if (error.code === \"ERR_NETWORK\") {\n                throw new Error(\"Unable to connect to the server. Please check if the backend is running.\");\n            }\n            throw error;\n        }\n    }\n    // Download file method\n    async downloadFile(url, filename) {\n        try {\n            const response = await this.client.get(url, {\n                responseType: \"blob\"\n            });\n            const blob = new Blob([\n                response.data\n            ]);\n            const downloadUrl = window.URL.createObjectURL(blob);\n            const link = document.createElement(\"a\");\n            link.href = downloadUrl;\n            link.download = filename;\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            window.URL.revokeObjectURL(downloadUrl);\n        } catch (error) {\n            if (error.code === \"ERR_NETWORK\") {\n                throw new Error(\"Unable to connect to the server. Please check if the backend is running.\");\n            }\n            throw error;\n        }\n    }\n    constructor(){\n        this.client = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n            baseURL: API_BASE_URL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            timeout: 30000,\n            withCredentials: false\n        });\n        this.setupInterceptors();\n    }\n}\nconst apiClient = new ApiClient();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api/client.ts\n"));

/***/ })

});